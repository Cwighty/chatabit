@page "/Chat"
@rendermode @(new InteractiveWebAssemblyRenderMode(false))
@implements IAsyncDisposable
@using Chat.Web.Client.Options
@using global::Chat.Data.Entities
@using Chat.Data.Features.Chat
@using System.Timers
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager Navigation
@inject ChatOptions options
@inject HttpClient HttpClient
@inject MessageFetcher mfer;

<div class="container">
    <div class="border border-1 p-1" style="display: flex; flex-direction: column-reverse; height: 500px; overflow: auto">
        @if (Messages == null | isLoading)
        {
            <em>Loading...</em>
        }
        else
        {
            @foreach (var user in userTyping)
            {
                if (user.Value)
                {
                    <div class="text-muted">@user.Key is typing...</div>
                }
            }
            @foreach (var m in Messages)
            {
                <div class="card mb-3">
                    <div class="card-header">
                        @m.UserName
                        <small class="text-muted ml-2">@m.CreatedAt.ToString("g")</small>
                    </div>
                    <div class="card-body">
                        @foreach (var img in m.Images)
                        {
                            <img src="@($"{HttpClient.BaseAddress}api/Image/file/{img}")" style="max-width: 30%; height: auto;"/>
                        }
                        <p class="card-text">@m.MessageText</p>
                    </div>
                </div>
            }
        }
    </div>

    @if (isBusy)
    {
        <em>Sending...</em>
    }
    else
    {
        <div class="form-group mb-2">
            <label>Message</label>
            <InputTextArea @bind-Value="message" disabled="@(String.IsNullOrEmpty(username))" @oninput="OnUserTyping" class="form-control"/>
        </div>
        <div class="row mb-2">
            <div class="col-md-9">
                <div class="form-group">
                    <label>Username</label>
                    <InputText @bind-Value="username" class="form-control"/>
                </div>
            </div>
            <div class="col-md-3 d-flex align-items-end">
                <button @onclick="SendMessage" class="btn btn-primary w-100">Send</button>
            </div>
        </div>
        <div class="form-group mb-2">
            <label>Upload Images</label>
            <InputFile multiple accept=".jpeg,.jpg,.png" OnChange="HandleSelectedFiles" @key="inputFileId"/>
            <div class="flex-row">
                @foreach (var img in uploadedImages)
                {
                    <img src="@($"data:image/png;base64,{img}")" style="max-width: 30%; height: auto;" />
                }
            </div>
        </div>
    }
</div>


@code {
    private string message = "";
    private string username = "";
    private List<ChatMessageResponse>? Messages { get; set; } = new();
    private List<string> uploadedImages = new List<string>();
    private bool isBusy = false;
    private bool isLoading = false;
    private Guid? inputFileId = Guid.NewGuid();
    private Timer? pollingTimer;
    private bool isDisposed = false;
    private HubConnection? hubConnection;
    private Dictionary<string, bool> userTyping = new Dictionary<string, bool>();
    private Timer? typingTimer;

    protected override async Task OnInitializedAsync()
    {
        typingTimer = new Timer(1000);
        typingTimer.Elapsed += async (sender, e) =>
        {
            await SendUserNotTypingMessage();
        };
        typingTimer.AutoReset = false;
        typingTimer.Enabled = true;

        Messages = await mfer.FetchMessages();

        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri(HttpClient.BaseAddress + "api/chatHub"))
        .Build();

        hubConnection.On<string, bool>("UserTyping", (user, typing) =>
        {
            userTyping[user] = typing;
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On("NewMessage", async () =>
        {
            Console.WriteLine("New message received");
            var latestMessage = Messages.FirstOrDefault();
            if (latestMessage is not null)
            {
                var newMessages = await mfer.FetchMessages(latestMessage.CreatedAt);
                Messages.InsertRange(0, newMessages); 
                await InvokeAsync(StateHasChanged);
            } 
        });

        await hubConnection.StartAsync();
    }

    private void UpdateMessages(List<ChatMessageResponse> messages)
    {
        Messages = messages;
        StateHasChanged();
    }

    private async Task HandleSelectedFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var base64String = await ConvertFileToBase64(file);
            uploadedImages.Add(base64String);
        }
    }

    private async Task<string> ConvertFileToBase64(IBrowserFile file)
    {
        const long MAXALLOWEDSIZE = 100000000; // Max size per file 100 mb
        var arrayBuffer = new byte[file.Size];
        await file.OpenReadStream(maxAllowedSize: MAXALLOWEDSIZE).ReadAsync(arrayBuffer);
        var base64String = Convert.ToBase64String(arrayBuffer);
        return base64String;
    }

    private async Task SendMessage()
    {
        isBusy = true;
        var chatMessage = new NewChatMessageRequest()
        {
            MessageText = message,
            UserName = username,
            Images = uploadedImages
        };

        await HttpClient.PostAsJsonAsync("api/chat", chatMessage);
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("NewMessage");
        }
        isBusy = false;

        message = "";
        uploadedImages.Clear();
        inputFileId = Guid.NewGuid();
    }

    private async Task OnUserTyping()
    {
        await SendUserTypingMessage();
        if (typingTimer is not null)
        {
            typingTimer.Stop();
            typingTimer.Start();
        }
    }

    
    private async Task SendUserTypingMessage()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UserTyping", username, true);
        }
    }

    private async Task SendUserNotTypingMessage()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("UserTyping", username, false);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        typingTimer?.Dispose();
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}