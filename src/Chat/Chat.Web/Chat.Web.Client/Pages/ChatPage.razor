@page "/Chat"
@using global::Chat.Data.Entities
@using Chat.Web.Client.Components
@using Chat.Data.Features.Chat
@inject HttpClient HttpClient

<div class="container">
    <div style="display: flex; flex-direction: column-reverse; max-height: 500px; overflow: auto">
        @if (Messages == null)
        {
            <em>Loading...</em>
        }
        else
        {
            @foreach (var m in Messages)
            {
                <div class="card mb-3">
                    <div class="card-header">
                        @m.UserName
                        <small class="text-muted ml-2">@m.CreatedAt.ToString("g")</small>
                    </div>
                    <div class="card-body">
						@foreach (var img in m.Images)
						{
							<img src="@($"data:image/png;base64,{img}")" style="max-width: 100%; height: auto;" />
						}
						<p class="card-text">@m.MessageText</p>
					</div>
                </div>
            }
        }
    </div>

    <div class="form-group mb-2">
            <label>Username</label>
            <InputText @bind-Value="username" class="form-control"/>
        </div>
        <div class="form-group mb-2">
            <label>Message</label>
            <InputText @bind-Value="message" class="form-control"/>
        </div>
        <div class="form-group mb-2">
            <label>Upload Images</label>
            <InputFile multiple OnChange="HandleSelectedFiles"/>
		@foreach (var img in uploadedImages)
		{
			<img src="@($"data:image/png;base64,{img}")" style="max-width: 100%; height: auto;" />
		}
        </div>
        <button @onclick="SendMessage" class="btn btn-primary mt-3">Send</button>
    </div>



@code {
    private string message = "";
    private string username = "";
    private List<ChatMessageResponse>? Messages { get; set; } = new();
    private List<string> uploadedImages = []; 

    protected override async Task OnInitializedAsync()
    {
        await LoadMessages();
    }

    private async Task LoadMessages()
    {
        var messages = await HttpClient.GetFromJsonAsync<List<ChatMessageResponse>>("api/chat");
        messages?.Reverse();
        Messages = messages;
    }

    private async Task HandleSelectedFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            var base64String = await ConvertFileToBase64(file);
            uploadedImages.Add(base64String);
        }
    }

    private async Task<string> ConvertFileToBase64(IBrowserFile file)
    {
        var arrayBuffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(arrayBuffer);
        var base64String = Convert.ToBase64String(arrayBuffer);
        return base64String;
    }

    private async Task SendMessage()
    {
		var chatMessage = new NewChatMessageRequest()
			{
				MessageText = message,
				UserName = username,
				Images = uploadedImages
			};

        await HttpClient.PostAsJsonAsync("api/chat", chatMessage);

        await LoadMessages();

        message = "";
        uploadedImages.Clear();
    }
}